# Copyright Nathan L Smith <smith@nlsmith.com>
# SPDX-License-Identifier: Apache-2.0

name: elastic-stack-docker-compose
configs:
  # [APM Server configuration](https://github.com/elastic/apm-server/blob/main/apm-server.yml)
  apm-server.yml:
    content: |
      apm-server:
        host: 0.0.0.0:${APM_SERVER_PORT}
      output.elasticsearch:
        hosts: ["https://elasticsearch:${ES_PORT}"]
        protocol: "https"
        ssl.certificate_authorities: ["config/certs/ca/ca.crt"]
        ssl.certificate: "config/certs/elasticsearch/elasticsearch.crt"
        ssl.enabled: true
        ssl.key: "config/certs/elasticsearch/elasticsearch.key"
        ssl.verification_mode: full
        username: "elastic"
        password: "${ELASTIC_PASSWORD}"
  api_key_create_params.json:
    content: |
      {
        "name": "elastic-stack-docker-compose-api-key",
        "role_descriptors": {       
          "standalone_agent": { 
            "cluster": ["monitor"], 
            "indices": [{
              "names": ["logs-*-*", "metrics-*-*", "traces-*-*"], 
              "privileges": ["auto_configure", "create_doc"], 
              "allow_restricted_indices": false }],
            "applications": [],
            "run_as": [],
            "metadata": {},
            "transient_metadata": { "enabled": true }
          }
        }
      }
  # [Kibana configuration](https://github.com/elastic/kibana/blob/main/config/kibana.yml)
  kibana.yml:
    content: |
      elastic.apm:
        active: true
        server_url: http://apmserver:${APM_SERVER_PORT}
        transaction.sample.rate: 1
      elasticsearch:
        hosts: [ "https://elasticsearch:${ES_PORT}" ]
        username: kibana_system
        password: ${KIBANA_PASSWORD}
        ssl:
          certificate: config/certs/elasticsearch/elasticsearch.crt
          certificateAuthorities: [ "config/certs/ca/ca.crt" ]
          key: config/certs/elasticsearch/elasticsearch.key
          verificationMode: full
      logging.root.level: warn
      monitoring.ui.container.elasticsearch.enabled: true
      server:
        host: "0.0.0.0"
        shutdownTimeout: "5s"
      xpack.encryptedSavedObjects.encryptionKey: 0c4fb61f013d771f43d321e5b2484f4d
      xpack.reporting.encryptionKey: 369ecfa55ee4b9e8c3d5481c6589287a
      xpack.reporting.roles.enabled: false
      xpack.screenshotting.browser.chromium.disableSandbox: true
      xpack.security.encryptionKey: 944c9b01e335cf7eebcda4413797f494
# TODO: Otel export logs from docker compose?
services:
  apmserver:
    scale: 0
    command: apm-server run
    configs:
    - source: apm-server.yml
      target: /usr/share/apm-server/apm-server.yml
    container_name: apmserver
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
      setup_certs:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 200M
    environment: {}
    image: ${APM_SERVER_IMAGE}
    ports:
    - ${APM_SERVER_PORT}:${APM_SERVER_PORT}
    restart: unless-stopped
    user: "0"
    volumes:
    - certs:/usr/share/apm-server/config/certs
  elasticsearch:
    # TODO: otel export from elasticsearch
    container_name: elasticsearch
    depends_on:
      setup_certs:
        condition: service_completed_successfully
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=${ES_CLUSTER_NAME}
    - discovery.type=single-node
    - ELASTIC_PASSWORD
    - logger.org.elasticsearch=WARN
    - node.name=elastic-stack-docker-compose-es-node-0
    - OTEL_EXPORTER_OTLP_ENDPOINT=otelcol:4317
    - OTEL_INSTRUMENTATION_ELASTICSEARCH_ENABLED=true
    - xpack.license.self_generated.type=${ES_LICENSE}
    - xpack.security.enabled=true
    - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
    - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
    - xpack.security.http.ssl.enabled=true
    - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
    - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
    - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
    - xpack.security.transport.ssl.enabled=true
    - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
    - xpack.security.transport.ssl.verification_mode=certificate
    healthcheck:
      interval: 2s
      retries: 120
      test:
      - CMD-SHELL
      - curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'
      timeout: 10s
    image: ${ES_IMAGE}
    mem_limit: ${MEM_LIMIT}
    ports:
    - ${ES_PORT}:${ES_PORT}
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    - esdata:/usr/share/elasticsearch/data
  kibana:
    # TODO: SSL
    # TODO: Kibana is currently running with legacy OpenSSL providers enabled! For details and instructions on how to disable see https://www.elastic.co/guide/en/kibana/current/production.html#openssl-legacy-provider
    # TODO: Error initializing AI assistant resources: Platinum, Enterprise or trial license needed
    # TODO :Session cookies will be transmitted over insecure connections. This is not recommended.
    # TODO generate encryption keys
    # TODO: Configure to export APM/otel data
    configs:
      - source: kibana.yml
        target: /usr/share/kibana/config/kibana.yml
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_kibana_user:
        condition: service_completed_successfully
    environment: {}
    healthcheck:
      interval: 10s
      retries: 120
      test:
      - CMD-SHELL
      - curl -s http://localhost:5601/api/status
      timeout: 10s
    image: ${KIBANA_IMAGE}
    mem_limit: ${MEM_LIMIT}
    ports:
    - ${KIBANA_PORT}:${KIBANA_PORT}
    restart: unless-stopped
    volumes:
    - certs:/usr/share/kibana/config/certs
    - kibanadata:/usr/share/kibana/data
  otelcol:
    scale: 0
    # TODO: self monitoring
    # TODO: configure for APM
    # TODO: health check for otelcol
    container_name: "otelcol"
    image: ${COLLECTOR_CONTRIB_IMAGE}
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 200M
    environment:
    - ELASTIC_AGENT_OTEL
    - ELASTIC_PASSWORD
    - ENVOY_PORT
    - ES_PORT
    - KIBANA_PORT
    - HOST_FILESYSTEM
    - OTEL_COLLECTOR_HOST
    - OTEL_COLLECTOR_PORT_GRPC
    - OTEL_COLLECTOR_PORT_HTTP
    restart: unless-stopped
    command:
    - --config
    - /etc/otelcol-config.yml
    - --config
    - /etc/elastic/api_key.yaml
    user: 0:0
    volumes:
    - ${HOST_FILESYSTEM}:/hostfs:ro
    - ${DOCKER_SOCK}:/var/run/docker.sock:ro
    - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
    - certs:/usr/share/elastic-agent/config/certs
    - etc:/etc/elastic
    ports:
    - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
    - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"
  setup_api_key:
    configs:
    - source: api_key_create_params.json
      target: /etc/elastic/api_key_create_params.json
    container_name: "setup_api_key"
    image: pnnlmiscscripts/curl-jq
    depends_on:
      elasticsearch:
        condition: service_healthy
    user: "0"
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    - etc:/etc/elastic
    command: >
        bash -c '
          test -f /etc/elastic/api_key.yaml || \
          curl --silent -X POST \
            --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt \
            --user elastic:${ELASTIC_PASSWORD} \
            -H "Content-Type: application/json" \
            https://elasticsearch:${ES_PORT}/_security/api_key \
            --data @/etc/elastic/api_key_create_params.json | \
          jq --raw-output .encoded | \
          (echo -ne "exporters:\n  elasticsearch:\n    api_key: " && cat) \
          > /etc/elastic/api_key.yaml
        '
  setup_certs:
    container_name: "setup_certs"
    image: ${ES_IMAGE}
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA" >&2;
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs" >&2;
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        exit 0
      '
  setup_kibana_user:
    container_name: "setup_kibana_user"
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: ${ES_IMAGE}
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    command: >
        bash -c '
          if [ -z "${ELASTIC_PASSWORD}" ]; then
            echo "Set the ELASTIC_PASSWORD environment variable in the .env file" >&2;
            exit 1;
          elif [ -z "${KIBANA_PASSWORD}" ]; then
            echo "Set the KIBANA_PASSWORD environment variable in the .env file" >&2;
            exit 1;
          fi;
          curl --silent -X POST \
            --cacert config/certs/ca/ca.crt \
            --user "elastic:${ELASTIC_PASSWORD}" \
            -H "Content-Type: application/json" \
            https://elasticsearch:${ES_PORT}/_security/user/kibana_system/_password \
            --data "{\"password\":\"${KIBANA_PASSWORD}\"}"
        '
volumes:
  certs:
    driver: local
  esdata:
    driver: local
  etc:
    driver: local
  kibanadata:
    driver: local
