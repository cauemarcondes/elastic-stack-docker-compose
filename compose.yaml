# Copyright Nathan L Smith <smith@nlsmith.com>
# SPDX-License-Identifier: Apache-2.0

name: elastic-stack-docker-compose
configs:
  apm-server.yml:
    file: config/apm-server.yml
  api_key_create_params.json:
    content: |
      {
        "name": "elastic-stack-docker-compose-api-key",
        "role_descriptors": {       
          "standalone_agent": { 
            "cluster": ["monitor"], 
            "indices": [{
              "names": ["logs-*-*", "metrics-*-*", "traces-*-*"], 
              "privileges": ["auto_configure", "create_doc"], 
              "allow_restricted_indices": false }],
            "applications": [],
            "run_as": [],
            "metadata": {},
            "transient_metadata": { "enabled": true }
          }
        }
      }
  create-certs.sh:
    file: scripts/create-certs.sh
  elasticsearch.yml:
    file: config/elasticsearch.yml
  kibana.yml:
    file: config/kibana.yml
# TODO: Otel export logs from docker compose?
services:
  apmserver:
    scale: 0
    configs:
    - source: apm-server.yml
      target: /usr/share/apm-server/apm-server.yml
    container_name: apmserver
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
      setup_certs:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 200M
    environment: 
    - apm-server.host="0.0.0.0:${APM_SERVER_PORT}""
    - output.elasticsearch.hosts="https://elasticsearch:${ES_PORT}"
    - output.elasticsearch.password="${ELASTIC_PASSWORD}"
    image: ${APM_SERVER_IMAGE}
    ports:
    - ${APM_SERVER_PORT}:${APM_SERVER_PORT}
    restart: unless-stopped
    user: "0"
    volumes:
    - certs:/usr/share/apm-server/config/certs
  elasticsearch:
    # TODO: apm export from elasticsearch
    configs:
    - source: elasticsearch.yml
      target: /usr/share/elasticsearch/config/elasticsearch.yml
    container_name: elasticsearch
    depends_on:
      setup_certs:
        condition: service_completed_successfully
    environment:
    - cluster.name="${ES_CLUSTER_NAME}"
    - xpack.license.self_generated.type="${ES_LICENSE}"
    healthcheck:
      interval: 2s
      retries: 120
      test:
      - CMD-SHELL
      - curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'
      timeout: 10s
    image: ${ES_IMAGE}
    mem_limit: ${ES_MEM_LIMIT}
    ports:
    - ${ES_PORT}:${ES_PORT}
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    - esdata:/usr/share/elasticsearch/data
  kibana:
     # TODO: SSL
    # TODO: Kibana is currently running with legacy OpenSSL providers enabled! For details and instructions on how to disable see https://www.elastic.co/guide/en/kibana/current/production.html#openssl-legacy-provider
    # TODO: Error initializing AI assistant resources: Platinum, Enterprise or trial license needed
    # TODO :Session cookies will be transmitted over insecure connections. This is not recommended.
    # TODO generate encryption keys
    configs:
      - source: kibana.yml
        target: /usr/share/kibana/config/kibana.yml
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_kibana_user:
        condition: service_completed_successfully
    environment:
    - ELASTIC_APM_SERVER_URL=http://apmserver:${APM_SERVER_PORT}
    - ELASTICSEARCH_HOSTS=https://elasticsearch:${ES_PORT}
    - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      interval: 10s
      retries: 120
      test:
      - CMD-SHELL
      - curl -s http://localhost:5601/api/status
      timeout: 10s
    image: ${KIBANA_IMAGE}
    mem_limit: ${ES_MEM_LIMIT}
    ports:
    - ${KIBANA_PORT}:${KIBANA_PORT}
    restart: unless-stopped
    volumes:
    - certs:/usr/share/kibana/config/certs
    - kibanadata:/usr/share/kibana/data
  otelcol:
    scale: 0
    # TODO: self monitoring
    # TODO: configure for APM
    # TODO: health check for otelcol
    container_name: "openstash"
    image: ${COLLECTOR_CONTRIB_IMAGE}
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 200M
    environment:
    - ELASTIC_AGENT_OTEL
    - ELASTIC_PASSWORD
    - ENVOY_PORT
    - ES_PORT
    - KIBANA_PORT
    - HOST_FILESYSTEM
    - OTEL_COLLECTOR_HOST
    - OTEL_COLLECTOR_PORT_GRPC
    - OTEL_COLLECTOR_PORT_HTTP
    restart: unless-stopped
    command:
    - --config
    - /etc/otelcol-config.yml
    - --config
    - /etc/elastic/api_key.yaml
    user: 0:0
    volumes:
    - ${HOST_FILESYSTEM}:/hostfs:ro
    - ${DOCKER_SOCK}:/var/run/docker.sock:ro
    - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
    - certs:/usr/share/elastic-agent/config/certs
    - etc:/etc/elastic
    ports:
    - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
    - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"
  setup_api_key:
    configs:
    - source: api_key_create_params.json
      target: /etc/elastic/api_key_create_params.json
    container_name: "setup_api_key"
    image: pnnlmiscscripts/curl-jq
    depends_on:
      elasticsearch:
        condition: service_healthy
    user: "0"
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    - etc:/etc/elastic
    command: >
        bash -c '
          test -f /etc/elastic/api_key.yaml || \
          curl --silent -X POST \
            --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt \
            --user elastic:${ELASTIC_PASSWORD} \
            -H "Content-Type: application/json" \
            https://elasticsearch:${ES_PORT}/_security/api_key \
            --data @/etc/elastic/api_key_create_params.json | \
          jq --raw-output .encoded | \
          (echo -ne "exporters:\n  elasticsearch:\n    api_key: " && cat) \
          > /etc/elastic/api_key.yaml
        '
  setup_certs:
    command: bash bin/create-certs.sh
    configs:
    - mode: 0700 
      source: create-certs.sh
      target: /usr/share/elasticsearch/bin/create-certs.sh
    container_name: "setup_certs"
    image: ${ES_IMAGE}
    user: "0"
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
  setup_kibana_user:
    container_name: "setup_kibana_user"
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: ${ES_IMAGE}
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    command: >
        bash -c '
          set -x
          if [ -z "${ELASTIC_PASSWORD}" ]; then
            echo "Set the ELASTIC_PASSWORD environment variable in the .env file" >&2;
            exit 1;
          elif [ -z "${KIBANA_PASSWORD}" ]; then
            echo "Set the KIBANA_PASSWORD environment variable in the .env file" >&2;
            exit 1;
          fi;
          curl --silent -X POST \
            --cacert config/certs/ca/ca.crt \
            --user "elastic:${ELASTIC_PASSWORD}" \
            -H "Content-Type: application/json" \
            https://elasticsearch:${ES_PORT}/_security/user/kibana_system/_password \
            --data "{\"password\":\"${KIBANA_PASSWORD}\"}"
        '
volumes:
  bin:
    driver: local
  certs:
    driver: local
  esdata:
    driver: local
  etc:
    driver: local
  kibanadata:
    driver: local
