# Copyright Nathan L Smith <smith@nlsmith.com>
# SPDX-License-Identifier: Apache-2.0

# TODO: Otel export logs from docker compose?

# [Compose file](https://docs.docker.com/reference/compose-file/) for Elastic stack
name: elastic-stack-docker-compose
configs:
  apm-server.yml:
    file: config/apm-server.yml
  api_key_create_params.json:
    content: |
      {
        "name": "elastic-stack-docker-compose-api-key",
        "role_descriptors": {       
          "standalone_agent": { 
            "cluster": ["monitor"], 
            "indices": [{
              "names": ["logs-*-*", "metrics-*-*", "traces-*-*"], 
              "privileges": ["auto_configure", "create_doc"], 
              "allow_restricted_indices": false }],
            "applications": [],
            "run_as": [],
            "metadata": {},
            "transient_metadata": { "enabled": true }
          }
        }
      }
  create-api-key.sh:
    file: scripts/create-api-key.sh
  create-certs.sh:
    file: scripts/create-certs.sh
  elasticsearch.yml:
    file: config/elasticsearch.yml
  kibana.yml:
    file: config/kibana.yml
  otelcol.yml:
    file: config/otelcol.yml
  set-kibana-system-user-password.sh:
    file: scripts/set-kibana-system-user-password.sh
services:
  apmserver:
    # TODO: why is it sending unencrypted traffic to ES?
    configs:
    - source: apm-server.yml
      target: /usr/share/apm-server/config/apm-server.yml
    container_name: apmserver
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
      setup_certs:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 200M
    develop:
      watch:
      - action: sync+restart
        path: config/apm-server.yml
        target: /usr/share/apm-server/config/apm-server.yml
    environment: 
    - apm-server.host="0.0.0.0:${APM_SERVER_PORT}"
    - output.elasticsearch.hosts=["https://elasticsearch:${ES_PORT}"]    
    - output.elasticsearch.password="${ELASTIC_PASSWORD}"
    image: ${APM_SERVER_IMAGE}
    ports:
    - ${APM_SERVER_PORT}:${APM_SERVER_PORT}
    restart: unless-stopped
    user: "0"
    volumes:
    - certs:/usr/share/apm-server/config/certs
  elasticsearch:
    # TODO: apm export from elasticsearch
    configs:
    - source: elasticsearch.yml
      target: /usr/share/elasticsearch/config/elasticsearch.yml
    container_name: elasticsearch
    depends_on:
      setup_certs:
        condition: service_completed_successfully
    develop:
      watch:
      - action: sync+restart
        path: config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
    environment:
    - ELASTIC_PASSWORD
    - cluster.name="${ES_CLUSTER_NAME}"
    - xpack.license.self_generated.type="${ES_LICENSE}"
    healthcheck:
      interval: 2s
      retries: 120
      test:
      - CMD-SHELL
      - curl -s --cacert config/certs/ca/ca.crt https://localhost:${ES_PORT} | grep -q 'missing authentication credentials'
      timeout: 10s
    image: ${ES_IMAGE}
    mem_limit: ${ES_MEM_LIMIT}
    ports:
    - ${ES_PORT}:${ES_PORT}
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    - esdata:/usr/share/elasticsearch/data
  kibana:
    # TODO: SSL
    # TODO: HTTP 2 (for es also?)
    # TODO: Turn on EEM
    # TODO: Kibana is currently running with legacy OpenSSL providers enabled! For details and instructions on how to disable see https://www.elastic.co/guide/en/kibana/current/production.html#openssl-legacy-provider
    # TODO: Error initializing AI assistant resources: Platinum, Enterprise or trial license needed
    # TODO :Session cookies will be transmitted over insecure connections. This is not recommended.
    # TODO generate encryption keys
    configs:
      - source: kibana.yml
        target: /usr/share/kibana/config/kibana.yml
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_kibana_user:
        condition: service_completed_successfully
    develop:
      watch:
      - action: sync+restart
        path: config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
    environment:
    - ELASTIC_APM_SERVER_URL=http://apmserver:${APM_SERVER_PORT}
    - ELASTICSEARCH_HOSTS=https://elasticsearch:${ES_PORT}
    - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      interval: 10s
      retries: 120
      test:
      - CMD-SHELL
      - curl -s http://localhost:5601/api/status
      timeout: 10s
    image: ${KIBANA_IMAGE}
    mem_limit: ${ES_MEM_LIMIT}
    ports:
    - ${KIBANA_PORT}:${KIBANA_PORT}
    restart: unless-stopped
    volumes:
    - certs:/usr/share/kibana/config/certs
    - kibanadata:/usr/share/kibana/data
  otelcol:
    # TODO: self monitoring
    # TODO: configure for APM
    # TODO: health check for otelcol
    command: --config /etc/otelcol/config.yaml --config /etc/elastic/api_key.yaml
    configs:
    - source: otelcol.yml
      target: /etc/otelcol/config.yaml
    container_name: "otelcol"
    depends_on:
      elasticsearch:
        condition: service_healthy
      setup_api_key:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 200M
    develop:
      watch:
      - action: sync+restart
        path: config/otelcol.yml
        target: /etc/otelcol/config.yaml
    environment:
    - ELASTIC_AGENT_OTEL
    - ELASTIC_PASSWORD
    - ES_PORT
    - KIBANA_PORT
    - OTEL_COLLECTOR_PORT_GRPC
    - OTEL_COLLECTOR_PORT_HTTP
    image: ${COLLECTOR_CONTRIB_IMAGE}
    ports:
    - "${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
    - "${OTEL_COLLECTOR_PORT_HTTP}:${OTEL_COLLECTOR_PORT_HTTP}"
    restart: unless-stopped
    user: 0:0
    volumes:
    - ${HOST_FILESYSTEM}:/hostfs:ro
    - ${DOCKER_SOCK}:/var/run/docker.sock:ro
    - certs:/usr/share/elastic-agent/config/certs
    - etc:/etc/elastic
  setup_api_key:
    command: bash /usr/share/elasticsearch/bin/create-api-key.sh
    configs:
    - source: api_key_create_params.json
      target: /etc/elastic/api_key_create_params.json
    - mode: 0700
      source: create-api-key.sh
      target: /usr/share/elasticsearch/bin/create-api-key.sh
    container_name: "setup_api_key"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
    - ELASTIC_PASSWORD
    - ES_PORT
    image: pnnlmiscscripts/curl-jq
    user: "0"
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
    - etc:/etc/elastic
  setup_certs:
    command: bash bin/create-certs.sh
    configs:
    - mode: 0700 
      source: create-certs.sh
      target: /usr/share/elasticsearch/bin/create-certs.sh
    container_name: "setup_certs"
    image: ${ES_IMAGE}
    user: "0"
    volumes:
    - certs:/usr/share/elasticsearch/config/certs
  setup_kibana_user:
    configs:
    - mode: 0700
      source: set-kibana-system-user-password.sh
      target: /usr/share/elasticsearch/bin/set-kibana-system-user-password.sh
    container_name: "setup_kibana_user"
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
    - ELASTIC_PASSWORD
    - ES_PORT
    - KIBANA_PASSWORD
    image: ${ES_IMAGE}
    command: bash bin/set-kibana-system-user-password.sh
    volumes:
    - certs:/usr/share/elasticsearch/config/certs     
volumes:
  bin:
    driver: local
  certs:
    driver: local
  esdata:
    driver: local
  etc:
    driver: local
  kibanadata:
    driver: local
